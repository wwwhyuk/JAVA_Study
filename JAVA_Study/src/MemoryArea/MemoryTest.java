package MemoryArea;

public class MemoryTest {
	int num = 0;
	
	void MA() {
		
	}
	
	public static void main(String[] args) {
		MemoryTest MT = new MemoryTest();
		MT.MA();
	}

}
/*
 * Heap : 객체 및 배열 인스턴스, 동적으로 할당된 데이터, GC를 통해 객체를 정리하곤한다.
 * Stack : 메소드의 지역 변수 및 매개변수, 메소드 호출 시 스택 프레임에 지역 변수가 할당되고, 메소드의 실행이 끝나면 프레임이 제거된다.
 * 스택에서 메소드는 LIFO 구조를 갖고 있고, 메소드 호출 및 복귀에 따라 프레임이 추가 및 제거된다.
 * 
 * 코드 Area : JVM에서 실행되는 명령어를 포함. Class Loader에 의해 로드된 클래스 파일의 바이트코드가 저장된다.
 * 데이터 Area : 클래스 변수(Static) 클래스 수준의 데이터가 데이터 영역에 저장되고, 이러한 변수는 클래스의 모든 인스턴스에서 공유되며, 인스턴스를 생성하지않고도 접근할 수 있다.
 * 메소드 Area : 클래스 정보: 클래스 로더에 의해 로드된 클래스의 정보, 메소드 테이블, 상수 풀 및 필드 정보가 메소드 영역에 저장됩니다. 이러한 정보는 클래스의 메타데이터를 포함하며, 모든 인스턴스에서 공유된다.
 * 
 * 
 * */
 */